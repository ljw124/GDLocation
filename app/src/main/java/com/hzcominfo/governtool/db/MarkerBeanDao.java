package com.hzcominfo.governtool.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.hzcominfo.governtool.bean.StringConverter;
import java.util.List;

import com.hzcominfo.governtool.bean.MarkerBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MARKER_BEAN".
*/
public class MarkerBeanDao extends AbstractDao<MarkerBean, Long> {

    public static final String TABLENAME = "MARKER_BEAN";

    /**
     * Properties of entity MarkerBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LatLngs = new Property(1, String.class, "latLngs", false, "LAT_LNGS");
        public final static Property LoacationInfo = new Property(2, String.class, "loacationInfo", false, "LOACATION_INFO");
        public final static Property Photos = new Property(3, String.class, "photos", false, "PHOTOS");
        public final static Property Describe = new Property(4, String.class, "describe", false, "DESCRIBE");
        public final static Property Voices = new Property(5, String.class, "voices", false, "VOICES");
        public final static Property VoiceTime = new Property(6, String.class, "voiceTime", false, "VOICE_TIME");
        public final static Property RecordTime = new Property(7, String.class, "recordTime", false, "RECORD_TIME");
        public final static Property MarkerName = new Property(8, String.class, "markerName", false, "MARKER_NAME");
        public final static Property IsNew = new Property(9, Boolean.class, "isNew", false, "IS_NEW");
        public final static Property MarkerId = new Property(10, Long.class, "markerId", false, "MARKER_ID");
    }

    private final StringConverter photosConverter = new StringConverter();
    private final StringConverter voicesConverter = new StringConverter();
    private final StringConverter voiceTimeConverter = new StringConverter();
    private Query<MarkerBean> polylineBean_MarkersQuery;

    public MarkerBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MarkerBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MARKER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LAT_LNGS\" TEXT," + // 1: latLngs
                "\"LOACATION_INFO\" TEXT," + // 2: loacationInfo
                "\"PHOTOS\" TEXT," + // 3: photos
                "\"DESCRIBE\" TEXT," + // 4: describe
                "\"VOICES\" TEXT," + // 5: voices
                "\"VOICE_TIME\" TEXT," + // 6: voiceTime
                "\"RECORD_TIME\" TEXT," + // 7: recordTime
                "\"MARKER_NAME\" TEXT," + // 8: markerName
                "\"IS_NEW\" INTEGER," + // 9: isNew
                "\"MARKER_ID\" INTEGER);"); // 10: markerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MARKER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MarkerBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String latLngs = entity.getLatLngs();
        if (latLngs != null) {
            stmt.bindString(2, latLngs);
        }
 
        String loacationInfo = entity.getLoacationInfo();
        if (loacationInfo != null) {
            stmt.bindString(3, loacationInfo);
        }
 
        List photos = entity.getPhotos();
        if (photos != null) {
            stmt.bindString(4, photosConverter.convertToDatabaseValue(photos));
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(5, describe);
        }
 
        List voices = entity.getVoices();
        if (voices != null) {
            stmt.bindString(6, voicesConverter.convertToDatabaseValue(voices));
        }
 
        List voiceTime = entity.getVoiceTime();
        if (voiceTime != null) {
            stmt.bindString(7, voiceTimeConverter.convertToDatabaseValue(voiceTime));
        }
 
        String recordTime = entity.getRecordTime();
        if (recordTime != null) {
            stmt.bindString(8, recordTime);
        }
 
        String markerName = entity.getMarkerName();
        if (markerName != null) {
            stmt.bindString(9, markerName);
        }
 
        Boolean isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(10, isNew ? 1L: 0L);
        }
 
        Long markerId = entity.getMarkerId();
        if (markerId != null) {
            stmt.bindLong(11, markerId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MarkerBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String latLngs = entity.getLatLngs();
        if (latLngs != null) {
            stmt.bindString(2, latLngs);
        }
 
        String loacationInfo = entity.getLoacationInfo();
        if (loacationInfo != null) {
            stmt.bindString(3, loacationInfo);
        }
 
        List photos = entity.getPhotos();
        if (photos != null) {
            stmt.bindString(4, photosConverter.convertToDatabaseValue(photos));
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(5, describe);
        }
 
        List voices = entity.getVoices();
        if (voices != null) {
            stmt.bindString(6, voicesConverter.convertToDatabaseValue(voices));
        }
 
        List voiceTime = entity.getVoiceTime();
        if (voiceTime != null) {
            stmt.bindString(7, voiceTimeConverter.convertToDatabaseValue(voiceTime));
        }
 
        String recordTime = entity.getRecordTime();
        if (recordTime != null) {
            stmt.bindString(8, recordTime);
        }
 
        String markerName = entity.getMarkerName();
        if (markerName != null) {
            stmt.bindString(9, markerName);
        }
 
        Boolean isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(10, isNew ? 1L: 0L);
        }
 
        Long markerId = entity.getMarkerId();
        if (markerId != null) {
            stmt.bindLong(11, markerId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MarkerBean readEntity(Cursor cursor, int offset) {
        MarkerBean entity = new MarkerBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // latLngs
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // loacationInfo
            cursor.isNull(offset + 3) ? null : photosConverter.convertToEntityProperty(cursor.getString(offset + 3)), // photos
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // describe
            cursor.isNull(offset + 5) ? null : voicesConverter.convertToEntityProperty(cursor.getString(offset + 5)), // voices
            cursor.isNull(offset + 6) ? null : voiceTimeConverter.convertToEntityProperty(cursor.getString(offset + 6)), // voiceTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // recordTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // markerName
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isNew
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // markerId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MarkerBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLatLngs(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLoacationInfo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhotos(cursor.isNull(offset + 3) ? null : photosConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setDescribe(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVoices(cursor.isNull(offset + 5) ? null : voicesConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setVoiceTime(cursor.isNull(offset + 6) ? null : voiceTimeConverter.convertToEntityProperty(cursor.getString(offset + 6)));
        entity.setRecordTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMarkerName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsNew(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setMarkerId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MarkerBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MarkerBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MarkerBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "markers" to-many relationship of PolylineBean. */
    public List<MarkerBean> _queryPolylineBean_Markers(Long markerId) {
        synchronized (this) {
            if (polylineBean_MarkersQuery == null) {
                QueryBuilder<MarkerBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MarkerId.eq(null));
                polylineBean_MarkersQuery = queryBuilder.build();
            }
        }
        Query<MarkerBean> query = polylineBean_MarkersQuery.forCurrentThread();
        query.setParameter(0, markerId);
        return query.list();
    }

}
