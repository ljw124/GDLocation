package com.hzcominfo.governtool.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hzcominfo.governtool.bean.StringConverter;
import java.util.List;

import com.hzcominfo.governtool.bean.PolylineBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POLYLINE_BEAN".
*/
public class PolylineBeanDao extends AbstractDao<PolylineBean, Long> {

    public static final String TABLENAME = "POLYLINE_BEAN";

    /**
     * Properties of entity PolylineBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LatLngs = new Property(1, String.class, "latLngs", false, "LAT_LNGS");
        public final static Property PathName = new Property(2, String.class, "pathName", false, "PATH_NAME");
        public final static Property Distance = new Property(3, Double.class, "distance", false, "DISTANCE");
        public final static Property Time = new Property(4, Long.class, "time", false, "TIME");
        public final static Property RecordTime = new Property(5, String.class, "recordTime", false, "RECORD_TIME");
        public final static Property IsNew = new Property(6, Boolean.class, "isNew", false, "IS_NEW");
    }

    private DaoSession daoSession;

    private final StringConverter latLngsConverter = new StringConverter();

    public PolylineBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PolylineBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POLYLINE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LAT_LNGS\" TEXT," + // 1: latLngs
                "\"PATH_NAME\" TEXT," + // 2: pathName
                "\"DISTANCE\" REAL," + // 3: distance
                "\"TIME\" INTEGER," + // 4: time
                "\"RECORD_TIME\" TEXT," + // 5: recordTime
                "\"IS_NEW\" INTEGER);"); // 6: isNew
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POLYLINE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PolylineBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        List latLngs = entity.getLatLngs();
        if (latLngs != null) {
            stmt.bindString(2, latLngsConverter.convertToDatabaseValue(latLngs));
        }
 
        String pathName = entity.getPathName();
        if (pathName != null) {
            stmt.bindString(3, pathName);
        }
 
        Double distance = entity.getDistance();
        if (distance != null) {
            stmt.bindDouble(4, distance);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time);
        }
 
        String recordTime = entity.getRecordTime();
        if (recordTime != null) {
            stmt.bindString(6, recordTime);
        }
 
        Boolean isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(7, isNew ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PolylineBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        List latLngs = entity.getLatLngs();
        if (latLngs != null) {
            stmt.bindString(2, latLngsConverter.convertToDatabaseValue(latLngs));
        }
 
        String pathName = entity.getPathName();
        if (pathName != null) {
            stmt.bindString(3, pathName);
        }
 
        Double distance = entity.getDistance();
        if (distance != null) {
            stmt.bindDouble(4, distance);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time);
        }
 
        String recordTime = entity.getRecordTime();
        if (recordTime != null) {
            stmt.bindString(6, recordTime);
        }
 
        Boolean isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(7, isNew ? 1L: 0L);
        }
    }

    @Override
    protected final void attachEntity(PolylineBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PolylineBean readEntity(Cursor cursor, int offset) {
        PolylineBean entity = new PolylineBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : latLngsConverter.convertToEntityProperty(cursor.getString(offset + 1)), // latLngs
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pathName
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // distance
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // recordTime
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // isNew
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PolylineBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLatLngs(cursor.isNull(offset + 1) ? null : latLngsConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setPathName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDistance(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setRecordTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsNew(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PolylineBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PolylineBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PolylineBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
